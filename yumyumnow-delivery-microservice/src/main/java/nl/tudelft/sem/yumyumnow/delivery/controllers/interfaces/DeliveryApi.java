/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package nl.tudelft.sem.yumyumnow.delivery.controllers.interfaces;

import java.math.BigDecimal;
import org.springframework.format.annotation.DateTimeFormat;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.entities.Delivery;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryAdminAnalyticsDeliveryTimeGet200Response;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryAdminAnalyticsDriverEfficiencyGet200Response;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryAdminAnalyticsIssuesGet200Response;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryAdminAnalyticsPreparationTimeGet200Response;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryAdminAnalyticsSuccessfulDeliveriesGet200Response;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryAdminAnalyticsTotalDeliveriesGet200Response;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryAdminMaxZoneGet200Response;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryIdAssignPutRequest;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryIdDeliveryTimePostRequest;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryIdDeliveryTimePutRequest;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryIdLocationPutRequest;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryIdStatusPutRequest;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryPostRequest;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryVendorIdCustomCouriersPutRequest;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.dto.DeliveryVendorIdMaxZonePutRequest;
import nl.tudelft.sem.yumyumnow.delivery.domain.Error;
import nl.tudelft.sem.yumyumnow.delivery.domain.model.Location;
import java.time.OffsetDateTime;
import java.util.UUID;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-12T16:32:44.343382+01:00[Europe/Amsterdam]")
@Validated
@Tag(name = "Admin", description = "Admin endpoints")
public interface DeliveryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /delivery/admin/analytics/delivery-time : Get delivery time analytics
     * Get delivery time analytics
     *
     * @param adminId The admin ID (required)
     * @param startDate Start date of the analytic. (required)
     * @param endDate End date of the analytic. (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Unavailable for Legal Reasons (status code 451)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryAdminAnalyticsDeliveryTimeGet",
        summary = "Get delivery time analytics",
        description = "Get delivery time analytics",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeliveryAdminAnalyticsDeliveryTimeGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "451", description = "Unavailable for Legal Reasons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/admin/analytics/delivery-time",
        produces = { "application/json" }
    )
    default ResponseEntity<DeliveryAdminAnalyticsDeliveryTimeGet200Response> deliveryAdminAnalyticsDeliveryTimeGet(
        @NotNull @Parameter(name = "adminId", description = "The admin ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "adminId", required = true) UUID adminId,
        @NotNull @Parameter(name = "startDate", description = "Start date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,
        @NotNull @Parameter(name = "endDate", description = "End date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"deliveryTime\" : 10, \"endDate\" : \"2018-11-10T13:49:51.141Z\", \"startDate\" : \"2018-11-10T13:49:51.141Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /delivery/admin/analytics/driver-efficiency : Get driver efficiency analytics
     * Get driver efficiency analytics
     *
     * @param adminId The admin ID (required)
     * @param startDate Start date of the analytic. (required)
     * @param endDate End date of the analytic. (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Unavailable for Legal Reasons (status code 451)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryAdminAnalyticsDriverEfficiencyGet",
        summary = "Get driver efficiency analytics",
        description = "Get driver efficiency analytics",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeliveryAdminAnalyticsDriverEfficiencyGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "451", description = "Unavailable for Legal Reasons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/admin/analytics/driver-efficiency",
        produces = { "application/json" }
    )
    default ResponseEntity<DeliveryAdminAnalyticsDriverEfficiencyGet200Response> deliveryAdminAnalyticsDriverEfficiencyGet(
        @NotNull @Parameter(name = "adminId", description = "The admin ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "adminId", required = true) UUID adminId,
        @NotNull @Parameter(name = "startDate", description = "Start date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,
        @NotNull @Parameter(name = "endDate", description = "End date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2018-11-10T13:49:51.141Z\", \"driverEfficiency\" : 10, \"startDate\" : \"2018-11-10T13:49:51.141Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /delivery/admin/analytics/issues : Get the encountered issues
     * Get the encountered issues
     *
     * @param adminId The admin ID (required)
     * @param startDate Start date of the analytic. (required)
     * @param endDate End date of the analytic. (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Unavailable for Legal Reasons (status code 451)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryAdminAnalyticsIssuesGet",
        summary = "Get the encountered issues",
        description = "Get the encountered issues",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeliveryAdminAnalyticsIssuesGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "451", description = "Unavailable for Legal Reasons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/admin/analytics/issues",
        produces = { "application/json" }
    )
    default ResponseEntity<DeliveryAdminAnalyticsIssuesGet200Response> deliveryAdminAnalyticsIssuesGet(
        @NotNull @Parameter(name = "adminId", description = "The admin ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "adminId", required = true) UUID adminId,
        @NotNull @Parameter(name = "startDate", description = "Start date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,
        @NotNull @Parameter(name = "endDate", description = "End date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2018-11-10T13:49:51.141Z\", \"startDate\" : \"2018-11-10T13:49:51.141Z\", \"encounteredIssues\" : [ \"Delivery was late\", \"Delivery was late\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /delivery/admin/analytics/preparation-time : Get preparation time analytics
     * Get preparation time analytics
     *
     * @param adminId The admin ID (required)
     * @param startDate Start date of the analytic. (required)
     * @param endDate End date of the analytic. (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Unavailable for Legal Reasons (status code 451)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryAdminAnalyticsPreparationTimeGet",
        summary = "Get preparation time analytics",
        description = "Get preparation time analytics",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeliveryAdminAnalyticsPreparationTimeGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "451", description = "Unavailable for Legal Reasons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/admin/analytics/preparation-time",
        produces = { "application/json" }
    )
    default ResponseEntity<DeliveryAdminAnalyticsPreparationTimeGet200Response> deliveryAdminAnalyticsPreparationTimeGet(
        @NotNull @Parameter(name = "adminId", description = "The admin ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "adminId", required = true) UUID adminId,
        @NotNull @Parameter(name = "startDate", description = "Start date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,
        @NotNull @Parameter(name = "endDate", description = "End date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2018-11-10T13:49:51.141Z\", \"preparationTime\" : 10, \"startDate\" : \"2018-11-10T13:49:51.141Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /delivery/admin/analytics/successful-deliveries : Get the total number of successful deliveries
     * Get the total number of successful deliveries
     *
     * @param adminId The admin ID (required)
     * @param startDate Start date of the analytic. (required)
     * @param endDate End date of the analytic. (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Unavailable for Legal Reasons (status code 451)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryAdminAnalyticsSuccessfulDeliveriesGet",
        summary = "Get the total number of successful deliveries",
        description = "Get the total number of successful deliveries",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeliveryAdminAnalyticsSuccessfulDeliveriesGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "451", description = "Unavailable for Legal Reasons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/admin/analytics/successful-deliveries",
        produces = { "application/json" }
    )
    default ResponseEntity<DeliveryAdminAnalyticsSuccessfulDeliveriesGet200Response> deliveryAdminAnalyticsSuccessfulDeliveriesGet(
        @NotNull @Parameter(name = "adminId", description = "The admin ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "adminId", required = true) UUID adminId,
        @NotNull @Parameter(name = "startDate", description = "Start date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,
        @NotNull @Parameter(name = "endDate", description = "End date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"successfulDeliveries\" : 10, \"endDate\" : \"2018-11-10T13:49:51.141Z\", \"startDate\" : \"2018-11-10T13:49:51.141Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /delivery/admin/analytics/total-deliveries : Get the total number of deliveries
     * Get the total number of deliveries
     *
     * @param adminId The admin ID (required)
     * @param startDate Start date of the analytic. (required)
     * @param endDate End date of the analytic. (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Unavailable for Legal Reasons (status code 451)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryAdminAnalyticsTotalDeliveriesGet",
        summary = "Get the total number of deliveries",
        description = "Get the total number of deliveries",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeliveryAdminAnalyticsTotalDeliveriesGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "451", description = "Unavailable for Legal Reasons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/admin/analytics/total-deliveries",
        produces = { "application/json" }
    )
    default ResponseEntity<DeliveryAdminAnalyticsTotalDeliveriesGet200Response> deliveryAdminAnalyticsTotalDeliveriesGet(
        @NotNull @Parameter(name = "adminId", description = "The admin ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "adminId", required = true) UUID adminId,
        @NotNull @Parameter(name = "startDate", description = "Start date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "startDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime startDate,
        @NotNull @Parameter(name = "endDate", description = "End date of the analytic.", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "endDate", required = true) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) OffsetDateTime endDate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"endDate\" : \"2018-11-10T13:49:51.141Z\", \"totalDeliveries\" : 10, \"startDate\" : \"2018-11-10T13:49:51.141Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /delivery/admin/max-zone : Get the default maximum delivery zone
     * Get the default maximum application-wide delivery zone in kilometers for all vendors. This default value is used if a vendor has not specified the delivery zone.
     *
     * @param adminId The admin ID (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Unavailable for Legal Reasons (status code 451)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryAdminMaxZoneGet",
        summary = "Get the default maximum delivery zone",
        description = "Get the default maximum application-wide delivery zone in kilometers for all vendors. This default value is used if a vendor has not specified the delivery zone.",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeliveryAdminMaxZoneGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "451", description = "Unavailable for Legal Reasons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/admin/max-zone",
        produces = { "application/json" }
    )
    default ResponseEntity<DeliveryAdminMaxZoneGet200Response> deliveryAdminMaxZoneGet(
        @NotNull @Parameter(name = "adminId", description = "The admin ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "adminId", required = true) UUID adminId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"radiusKm\" : 2, \"adminId\" : \"7ddf1a10-8dfa-11ee-b9d1-0242ac120002\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /delivery/admin/max-zone : Set the default maximum delivery zone
     * Set the default maximum application-wide delivery zone in kilometers for all vendors. This default value is used if a vendor has not specified the delivery zone.
     *
     * @param deliveryAdminMaxZoneGet200Response  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Unavailable for Legal Reasons (status code 451)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryAdminMaxZonePut",
        summary = "Set the default maximum delivery zone",
        description = "Set the default maximum application-wide delivery zone in kilometers for all vendors. This default value is used if a vendor has not specified the delivery zone.",
        tags = { "Admin" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeliveryAdminMaxZoneGet200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "451", description = "Unavailable for Legal Reasons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/delivery/admin/max-zone",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DeliveryAdminMaxZoneGet200Response> deliveryAdminMaxZonePut(
        @Parameter(name = "DeliveryAdminMaxZoneGet200Response", description = "") @Valid @RequestBody(required = false) DeliveryAdminMaxZoneGet200Response deliveryAdminMaxZoneGet200Response
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"radiusKm\" : 2, \"adminId\" : \"7ddf1a10-8dfa-11ee-b9d1-0242ac120002\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /delivery/available : Get available deliveries in radius
     * Get available deliveries in radius (for couriers). If a vendor has chosen to only deliver using its own couriers, then deliveries from that vendor will only be returned if the courier is affiliated with that vendor.
     *
     * @param radius The maximum distance in kilometers (required)
     * @param location The location for which the distances are calculated (required)
     * @param courierId The courier ID (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryAvailableGet",
        summary = "Get available deliveries in radius",
        description = "Get available deliveries in radius (for couriers). If a vendor has chosen to only deliver using its own couriers, then deliveries from that vendor will only be returned if the courier is affiliated with that vendor.",
        tags = { "Delivery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Delivery.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/available",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Delivery>> deliveryAvailableGet(
        @NotNull @Parameter(name = "radius", description = "The maximum distance in kilometers", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "radius", required = true) BigDecimal radius,
        @NotNull @Parameter(name = "location", description = "The location for which the distances are calculated", required = true, in = ParameterIn.QUERY) @Valid Location location,
        @NotNull @Parameter(name = "courierId", description = "The courier ID", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "courierId", required = true) UUID courierId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } }, { \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /delivery/{id}/assign : Assign the delivery to the courier
     * The delivery is assigned to a courier.
     *
     * @param id UUID of the delivery (required)
     * @param deliveryIdAssignPutRequest  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryIdAssignPut",
        summary = "Assign the delivery to the courier",
        description = "The delivery is assigned to a courier.",
        tags = { "Delivery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Delivery.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/delivery/{id}/assign",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Delivery> deliveryIdAssignPut(
        @Parameter(name = "id", description = "UUID of the delivery", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "DeliveryIdAssignPutRequest", description = "") @Valid @RequestBody(required = false) DeliveryIdAssignPutRequest deliveryIdAssignPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /delivery/{id}/deliveryTime : Set the delivery time
     * Set estimated delivery time of an existing delivery (for couriers).
     *
     * @param id UUID of the delivery (required)
     * @param deliveryIdDeliveryTimePostRequest  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "deliveryIdDeliveryTimePost",
        summary = "Set the delivery time",
        description = "Set estimated delivery time of an existing delivery (for couriers).",
        tags = { "Delivery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Delivery.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/delivery/{id}/deliveryTime",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Delivery> deliveryIdDeliveryTimePost(
        @Parameter(name = "id", description = "UUID of the delivery", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "DeliveryIdDeliveryTimePostRequest", description = "") @Valid @RequestBody(required = false) DeliveryIdDeliveryTimePostRequest deliveryIdDeliveryTimePostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /delivery/{id}/deliveryTime : Update the delivery time
     * Update estimated delivery time of an existing delivery (for couriers).
     *
     * @param id UUID of the delivery (required)
     * @param deliveryIdDeliveryTimePutRequest  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryIdDeliveryTimePut",
        summary = "Update the delivery time",
        description = "Update estimated delivery time of an existing delivery (for couriers).",
        tags = { "Delivery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Delivery.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/delivery/{id}/deliveryTime",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Delivery> deliveryIdDeliveryTimePut(
        @Parameter(name = "id", description = "UUID of the delivery", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "DeliveryIdDeliveryTimePutRequest", description = "") @Valid @RequestBody(required = false) DeliveryIdDeliveryTimePutRequest deliveryIdDeliveryTimePutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /delivery/{id} : Get a delivery
     * Get delivery details based on id.
     *
     * @param id UUID of the delivery (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryIdGet",
        summary = "Get a delivery",
        description = "Get delivery details based on id.",
        tags = { "Delivery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Delivery.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/delivery/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Delivery> deliveryIdGet(
        @Parameter(name = "id", description = "UUID of the delivery", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /delivery/{id}/location : Update the location of the delivery
     * Update the current location of the delivery (for couriers).
     *
     * @param id UUID of the delivery (required)
     * @param deliveryIdLocationPutRequest  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryIdLocationPut",
        summary = "Update the location of the delivery",
        description = "Update the current location of the delivery (for couriers).",
        tags = { "Delivery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Delivery.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/delivery/{id}/location",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Delivery> deliveryIdLocationPut(
        @Parameter(name = "id", description = "UUID of the delivery", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "DeliveryIdLocationPutRequest", description = "") @Valid @RequestBody(required = false) DeliveryIdLocationPutRequest deliveryIdLocationPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /delivery/{id}/prepTime : Set the prep time
     * Set estimated prep time of an existing delivery (for vendors).
     *
     * @param id UUID of the delivery (required)
     * @param deliveryIdDeliveryTimePostRequest  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryIdPrepTimePost",
        summary = "Set the prep time",
        description = "Set estimated prep time of an existing delivery (for vendors).",
        tags = { "Delivery" },
        responses = {
                @ApiResponse(responseCode = "200", description = "Successful response", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = Delivery.class))
                }),
                @ApiResponse(responseCode = "400", description = "Bad request", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                }),
                @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                }),
                @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/delivery/{id}/prepTime",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Delivery> deliveryIdPrepTimePost(
        @Parameter(name = "id", description = "UUID of the delivery", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "DeliveryIdDeliveryTimePostRequest", description = "") @Valid @RequestBody(required = false) DeliveryIdDeliveryTimePostRequest deliveryIdDeliveryTimePostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /delivery/{id}/prepTime : Update the prep time
     * Update estimated prep time of an existing delivery (for vendors).
     *
     * @param id UUID of the delivery (required)
     * @param deliveryIdDeliveryTimePostRequest  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "deliveryIdPrepTimePut",
        summary = "Update the prep time",
        description = "Update estimated prep time of an existing delivery (for vendors).",
        tags = { "Delivery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Delivery.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/delivery/{id}/prepTime",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Delivery> deliveryIdPrepTimePut(
        @Parameter(name = "id", description = "UUID of the delivery", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "DeliveryIdDeliveryTimePostRequest", description = "") @Valid @RequestBody(required = false) DeliveryIdDeliveryTimePostRequest deliveryIdDeliveryTimePostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /delivery/{id}/status : Update the status of a delivery
     * Update the status of a delivery. Vendors can set the status to ACCEPTED, REJECTED, PREPARING, GIVEN_TO_COURIER. Couriers can set the status to IN_TRANSIT, DELIVERED.
     *
     * @param id UUID of the delivery (required)
     * @param deliveryIdStatusPutRequest  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Unavailable for Legal Reasons (status code 451)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryIdStatusPut",
        summary = "Update the status of a delivery",
        description = "Update the status of a delivery. Vendors can set the status to ACCEPTED, REJECTED, PREPARING, GIVEN_TO_COURIER. Couriers can set the status to IN_TRANSIT, DELIVERED.",
        tags = { "Delivery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Delivery.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "451", description = "Unavailable for Legal Reasons", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/delivery/{id}/status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Delivery> deliveryIdStatusPut(
        @Parameter(name = "id", description = "UUID of the delivery", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "DeliveryIdStatusPutRequest", description = "") @Valid @RequestBody(required = false) DeliveryIdStatusPutRequest deliveryIdStatusPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /delivery : Create a delivery
     * Create a delivery based on order data (for vendors).
     *
     * @param deliveryPostRequest  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryPost",
        summary = "Create a delivery",
        description = "Create a delivery based on order data (for vendors).",
        tags = { "Delivery" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Delivery.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/delivery",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Delivery> deliveryPost(
        @Parameter(name = "DeliveryPostRequest", description = "") @Valid @RequestBody(required = false) DeliveryPostRequest deliveryPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"estimatedPreparationFinishTime\" : \"2018-11-10T13:47:51.141Z\", \"orderId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"estimatedDeliveryTime\" : \"2018-11-10T13:49:51.141Z\", \"vendorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"courierId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"id\" : \"7ddf1b64-8dfa-11ee-b9d1-0242ac120002\", \"status\" : \"PREPARING\", \"currentLocation\" : { \"latitude\" : 10, \"timestamp\" : \"2018-12-10T13:49:51.141Z\", \"longitude\" : 20 } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /delivery/vendor/{id}/customCouriers : Set whether a vendor allows only its own couriers
     * Vendors can set whether they allow only their own couriers to deliver their food.
     *
     * @param id UUID of the vendor (required)
     * @param deliveryVendorIdCustomCouriersPutRequest  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "deliveryVendorIdCustomCouriersPut",
        summary = "Set whether a vendor allows only its own couriers",
        description = "Vendors can set whether they allow only their own couriers to deliver their food.",
        tags = { "Vendor" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeliveryVendorIdCustomCouriersPutRequest.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/delivery/vendor/{id}/customCouriers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DeliveryVendorIdCustomCouriersPutRequest> deliveryVendorIdCustomCouriersPut(
        @Parameter(name = "id", description = "UUID of the vendor", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "DeliveryVendorIdCustomCouriersPutRequest", description = "") @Valid @RequestBody(required = false) DeliveryVendorIdCustomCouriersPutRequest deliveryVendorIdCustomCouriersPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"vendorId\" : \"7ddf1a10-8dfa-11ee-b9d1-0242ac120002\", \"allowsOnlyOwnCouriers\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /delivery/vendor/{id}/max-zone : Set the maximum delivery zone of a vendor
     * Vendors can set a maximum delivery zone for their own restaurant if they have their own drivers.
     *
     * @param id UUID of the vendor (required)
     * @param deliveryVendorIdMaxZonePutRequest  (optional)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbidden (status code 403)
     *         or Service Unavailable (status code 503)
     */
    @Operation(
        operationId = "deliveryVendorIdMaxZonePut",
        summary = "Set the maximum delivery zone of a vendor",
        description = "Vendors can set a maximum delivery zone for their own restaurant if they have their own drivers.",
        tags = { "Vendor" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeliveryVendorIdMaxZonePutRequest.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service Unavailable", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/delivery/vendor/{id}/max-zone",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<DeliveryVendorIdMaxZonePutRequest> deliveryVendorIdMaxZonePut(
        @Parameter(name = "id", description = "UUID of the vendor", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id,
        @Parameter(name = "DeliveryVendorIdMaxZonePutRequest", description = "") @Valid @RequestBody(required = false) DeliveryVendorIdMaxZonePutRequest deliveryVendorIdMaxZonePutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"radiusKm\" : 2, \"vendorId\" : \"7ddf1a10-8dfa-11ee-b9d1-0242ac120002\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
