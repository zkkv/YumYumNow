/*
 * YumYumNow Delivery API
 * YumYumNow Delivery
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.Location;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Delivery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T18:44:49.945626+01:00[Europe/Amsterdam]")
public class Delivery {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Object id = null;

  public static final String SERIALIZED_NAME_ORDER_ID = "orderId";
  @SerializedName(SERIALIZED_NAME_ORDER_ID)
  private Object orderId = null;

  public static final String SERIALIZED_NAME_COURIER_ID = "courierId";
  @SerializedName(SERIALIZED_NAME_COURIER_ID)
  private Object courierId = null;

  public static final String SERIALIZED_NAME_VENDOR_ID = "vendorId";
  @SerializedName(SERIALIZED_NAME_VENDOR_ID)
  private Object vendorId = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING("PENDING"),
    
    ACCEPTED("ACCEPTED"),
    
    REJECTED("REJECTED"),
    
    PREPARING("PREPARING"),
    
    GIVEN_TO_COURIER("GIVEN_TO_COURIER"),
    
    IN_TRANSIT("IN_TRANSIT"),
    
    DELIVERED("DELIVERED");

    private Object value;

    StatusEnum(Object value) {
      this.value = value;
    }

    public Object getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Object value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Object value =  jsonReader.nextObject();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status = null;

  public static final String SERIALIZED_NAME_ESTIMATED_DELIVERY_TIME = "estimatedDeliveryTime";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_DELIVERY_TIME)
  private Object estimatedDeliveryTime = null;

  public static final String SERIALIZED_NAME_ESTIMATED_PREPARATION_FINISH_TIME = "estimatedPreparationFinishTime";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_PREPARATION_FINISH_TIME)
  private Object estimatedPreparationFinishTime = null;

  public static final String SERIALIZED_NAME_CURRENT_LOCATION = "currentLocation";
  @SerializedName(SERIALIZED_NAME_CURRENT_LOCATION)
  private Location currentLocation;

  public Delivery() {
  }

  public Delivery id(Object id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7ddf1b64-8dfa-11ee-b9d1-0242ac120002", value = "")

  public Object getId() {
    return id;
  }


  public void setId(Object id) {
    this.id = id;
  }


  public Delivery orderId(Object orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Get orderId
   * @return orderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getOrderId() {
    return orderId;
  }


  public void setOrderId(Object orderId) {
    this.orderId = orderId;
  }


  public Delivery courierId(Object courierId) {
    
    this.courierId = courierId;
    return this;
  }

   /**
   * Get courierId
   * @return courierId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCourierId() {
    return courierId;
  }


  public void setCourierId(Object courierId) {
    this.courierId = courierId;
  }


  public Delivery vendorId(Object vendorId) {
    
    this.vendorId = vendorId;
    return this;
  }

   /**
   * Get vendorId
   * @return vendorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getVendorId() {
    return vendorId;
  }


  public void setVendorId(Object vendorId) {
    this.vendorId = vendorId;
  }


  public Delivery status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PREPARING", value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Delivery estimatedDeliveryTime(Object estimatedDeliveryTime) {
    
    this.estimatedDeliveryTime = estimatedDeliveryTime;
    return this;
  }

   /**
   * Get estimatedDeliveryTime
   * @return estimatedDeliveryTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-11-10T13:49:51.141Z", value = "")

  public Object getEstimatedDeliveryTime() {
    return estimatedDeliveryTime;
  }


  public void setEstimatedDeliveryTime(Object estimatedDeliveryTime) {
    this.estimatedDeliveryTime = estimatedDeliveryTime;
  }


  public Delivery estimatedPreparationFinishTime(Object estimatedPreparationFinishTime) {
    
    this.estimatedPreparationFinishTime = estimatedPreparationFinishTime;
    return this;
  }

   /**
   * Get estimatedPreparationFinishTime
   * @return estimatedPreparationFinishTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-11-10T13:47:51.141Z", value = "")

  public Object getEstimatedPreparationFinishTime() {
    return estimatedPreparationFinishTime;
  }


  public void setEstimatedPreparationFinishTime(Object estimatedPreparationFinishTime) {
    this.estimatedPreparationFinishTime = estimatedPreparationFinishTime;
  }


  public Delivery currentLocation(Location currentLocation) {
    
    this.currentLocation = currentLocation;
    return this;
  }

   /**
   * Get currentLocation
   * @return currentLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Location getCurrentLocation() {
    return currentLocation;
  }


  public void setCurrentLocation(Location currentLocation) {
    this.currentLocation = currentLocation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Delivery delivery = (Delivery) o;
    return Objects.equals(this.id, delivery.id) &&
        Objects.equals(this.orderId, delivery.orderId) &&
        Objects.equals(this.courierId, delivery.courierId) &&
        Objects.equals(this.vendorId, delivery.vendorId) &&
        Objects.equals(this.status, delivery.status) &&
        Objects.equals(this.estimatedDeliveryTime, delivery.estimatedDeliveryTime) &&
        Objects.equals(this.estimatedPreparationFinishTime, delivery.estimatedPreparationFinishTime) &&
        Objects.equals(this.currentLocation, delivery.currentLocation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, orderId, courierId, vendorId, status, estimatedDeliveryTime, estimatedPreparationFinishTime, currentLocation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Delivery {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("    courierId: ").append(toIndentedString(courierId)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    estimatedDeliveryTime: ").append(toIndentedString(estimatedDeliveryTime)).append("\n");
    sb.append("    estimatedPreparationFinishTime: ").append(toIndentedString(estimatedPreparationFinishTime)).append("\n");
    sb.append("    currentLocation: ").append(toIndentedString(currentLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("orderId");
    openapiFields.add("courierId");
    openapiFields.add("vendorId");
    openapiFields.add("status");
    openapiFields.add("estimatedDeliveryTime");
    openapiFields.add("estimatedPreparationFinishTime");
    openapiFields.add("currentLocation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Delivery
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Delivery.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Delivery is not found in the empty JSON string", Delivery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Delivery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Delivery` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `currentLocation`
      if (jsonObj.get("currentLocation") != null && !jsonObj.get("currentLocation").isJsonNull()) {
        Location.validateJsonObject(jsonObj.getAsJsonObject("currentLocation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Delivery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Delivery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Delivery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Delivery.class));

       return (TypeAdapter<T>) new TypeAdapter<Delivery>() {
           @Override
           public void write(JsonWriter out, Delivery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Delivery read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Delivery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Delivery
  * @throws IOException if the JSON string is invalid with respect to Delivery
  */
  public static Delivery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Delivery.class);
  }

 /**
  * Convert an instance of Delivery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

