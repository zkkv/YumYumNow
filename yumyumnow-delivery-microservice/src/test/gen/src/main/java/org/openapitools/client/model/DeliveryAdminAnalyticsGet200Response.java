/*
 * YumYumNow Delivery API
 * YumYumNow Delivery
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Analytic;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeliveryAdminAnalyticsGet200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T18:44:49.945626+01:00[Europe/Amsterdam]")
public class DeliveryAdminAnalyticsGet200Response {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private Object startDate = null;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private Object endDate = null;

  public static final String SERIALIZED_NAME_TOTAL_DELIVERIES = "totalDeliveries";
  @SerializedName(SERIALIZED_NAME_TOTAL_DELIVERIES)
  private Object totalDeliveries = null;

  public static final String SERIALIZED_NAME_SUCCESSFUL_DELIVERIES = "successfulDeliveries";
  @SerializedName(SERIALIZED_NAME_SUCCESSFUL_DELIVERIES)
  private Object successfulDeliveries = null;

  public static final String SERIALIZED_NAME_ANALYTICS = "analytics";
  @SerializedName(SERIALIZED_NAME_ANALYTICS)
  private List<Analytic> analytics = null;

  public DeliveryAdminAnalyticsGet200Response() {
  }

  public DeliveryAdminAnalyticsGet200Response startDate(Object startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-11-10T13:49:51.141Z", value = "")

  public Object getStartDate() {
    return startDate;
  }


  public void setStartDate(Object startDate) {
    this.startDate = startDate;
  }


  public DeliveryAdminAnalyticsGet200Response endDate(Object endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-11-10T13:49:51.141Z", value = "")

  public Object getEndDate() {
    return endDate;
  }


  public void setEndDate(Object endDate) {
    this.endDate = endDate;
  }


  public DeliveryAdminAnalyticsGet200Response totalDeliveries(Object totalDeliveries) {
    
    this.totalDeliveries = totalDeliveries;
    return this;
  }

   /**
   * Get totalDeliveries
   * @return totalDeliveries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "")

  public Object getTotalDeliveries() {
    return totalDeliveries;
  }


  public void setTotalDeliveries(Object totalDeliveries) {
    this.totalDeliveries = totalDeliveries;
  }


  public DeliveryAdminAnalyticsGet200Response successfulDeliveries(Object successfulDeliveries) {
    
    this.successfulDeliveries = successfulDeliveries;
    return this;
  }

   /**
   * Get successfulDeliveries
   * @return successfulDeliveries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5", value = "")

  public Object getSuccessfulDeliveries() {
    return successfulDeliveries;
  }


  public void setSuccessfulDeliveries(Object successfulDeliveries) {
    this.successfulDeliveries = successfulDeliveries;
  }


  public DeliveryAdminAnalyticsGet200Response analytics(List<Analytic> analytics) {
    
    this.analytics = analytics;
    return this;
  }

  public DeliveryAdminAnalyticsGet200Response addAnalyticsItem(Analytic analyticsItem) {
    if (this.analytics == null) {
      this.analytics = new ArrayList<>();
    }
    this.analytics.add(analyticsItem);
    return this;
  }

   /**
   * Get analytics
   * @return analytics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Analytic> getAnalytics() {
    return analytics;
  }


  public void setAnalytics(List<Analytic> analytics) {
    this.analytics = analytics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryAdminAnalyticsGet200Response deliveryAdminAnalyticsGet200Response = (DeliveryAdminAnalyticsGet200Response) o;
    return Objects.equals(this.startDate, deliveryAdminAnalyticsGet200Response.startDate) &&
        Objects.equals(this.endDate, deliveryAdminAnalyticsGet200Response.endDate) &&
        Objects.equals(this.totalDeliveries, deliveryAdminAnalyticsGet200Response.totalDeliveries) &&
        Objects.equals(this.successfulDeliveries, deliveryAdminAnalyticsGet200Response.successfulDeliveries) &&
        Objects.equals(this.analytics, deliveryAdminAnalyticsGet200Response.analytics);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, endDate, totalDeliveries, successfulDeliveries, analytics);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryAdminAnalyticsGet200Response {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    totalDeliveries: ").append(toIndentedString(totalDeliveries)).append("\n");
    sb.append("    successfulDeliveries: ").append(toIndentedString(successfulDeliveries)).append("\n");
    sb.append("    analytics: ").append(toIndentedString(analytics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("totalDeliveries");
    openapiFields.add("successfulDeliveries");
    openapiFields.add("analytics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DeliveryAdminAnalyticsGet200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DeliveryAdminAnalyticsGet200Response.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryAdminAnalyticsGet200Response is not found in the empty JSON string", DeliveryAdminAnalyticsGet200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DeliveryAdminAnalyticsGet200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryAdminAnalyticsGet200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("analytics") != null && !jsonObj.get("analytics").isJsonNull()) {
        JsonArray jsonArrayanalytics = jsonObj.getAsJsonArray("analytics");
        if (jsonArrayanalytics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("analytics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `analytics` to be an array in the JSON string but got `%s`", jsonObj.get("analytics").toString()));
          }

          // validate the optional field `analytics` (array)
          for (int i = 0; i < jsonArrayanalytics.size(); i++) {
            Analytic.validateJsonObject(jsonArrayanalytics.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryAdminAnalyticsGet200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryAdminAnalyticsGet200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryAdminAnalyticsGet200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryAdminAnalyticsGet200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryAdminAnalyticsGet200Response>() {
           @Override
           public void write(JsonWriter out, DeliveryAdminAnalyticsGet200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryAdminAnalyticsGet200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DeliveryAdminAnalyticsGet200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DeliveryAdminAnalyticsGet200Response
  * @throws IOException if the JSON string is invalid with respect to DeliveryAdminAnalyticsGet200Response
  */
  public static DeliveryAdminAnalyticsGet200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryAdminAnalyticsGet200Response.class);
  }

 /**
  * Convert an instance of DeliveryAdminAnalyticsGet200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

