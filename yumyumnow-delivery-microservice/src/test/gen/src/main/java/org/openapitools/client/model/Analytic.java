/*
 * YumYumNow Delivery API
 * YumYumNow Delivery
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.Delivery;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Analytic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-28T18:44:49.945626+01:00[Europe/Amsterdam]")
public class Analytic {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Object id = null;

  public static final String SERIALIZED_NAME_DELIVERY = "delivery";
  @SerializedName(SERIALIZED_NAME_DELIVERY)
  private Delivery delivery;

  public static final String SERIALIZED_NAME_PREPARATION_TIME = "preparationTime";
  @SerializedName(SERIALIZED_NAME_PREPARATION_TIME)
  private Object preparationTime = null;

  public static final String SERIALIZED_NAME_DELIVERY_TIME = "deliveryTime";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TIME)
  private Object deliveryTime = null;

  public static final String SERIALIZED_NAME_DRIVER_EFFICIENCY = "driverEfficiency";
  @SerializedName(SERIALIZED_NAME_DRIVER_EFFICIENCY)
  private Object driverEfficiency = null;

  public static final String SERIALIZED_NAME_ENCOUNTERED_ISSUES = "encounteredIssues";
  @SerializedName(SERIALIZED_NAME_ENCOUNTERED_ISSUES)
  private Object encounteredIssues = null;

  public Analytic() {
  }

  public Analytic id(Object id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "7ddf1042-8dfa-11ee-b9d1-0242ac120002", value = "")

  public Object getId() {
    return id;
  }


  public void setId(Object id) {
    this.id = id;
  }


  public Analytic delivery(Delivery delivery) {
    
    this.delivery = delivery;
    return this;
  }

   /**
   * Get delivery
   * @return delivery
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Delivery getDelivery() {
    return delivery;
  }


  public void setDelivery(Delivery delivery) {
    this.delivery = delivery;
  }


  public Analytic preparationTime(Object preparationTime) {
    
    this.preparationTime = preparationTime;
    return this;
  }

   /**
   * Get preparationTime
   * @return preparationTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "")

  public Object getPreparationTime() {
    return preparationTime;
  }


  public void setPreparationTime(Object preparationTime) {
    this.preparationTime = preparationTime;
  }


  public Analytic deliveryTime(Object deliveryTime) {
    
    this.deliveryTime = deliveryTime;
    return this;
  }

   /**
   * Get deliveryTime
   * @return deliveryTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "")

  public Object getDeliveryTime() {
    return deliveryTime;
  }


  public void setDeliveryTime(Object deliveryTime) {
    this.deliveryTime = deliveryTime;
  }


  public Analytic driverEfficiency(Object driverEfficiency) {
    
    this.driverEfficiency = driverEfficiency;
    return this;
  }

   /**
   * Get driverEfficiency
   * @return driverEfficiency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "")

  public Object getDriverEfficiency() {
    return driverEfficiency;
  }


  public void setDriverEfficiency(Object driverEfficiency) {
    this.driverEfficiency = driverEfficiency;
  }


  public Analytic encounteredIssues(Object encounteredIssues) {
    
    this.encounteredIssues = encounteredIssues;
    return this;
  }

   /**
   * Get encounteredIssues
   * @return encounteredIssues
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getEncounteredIssues() {
    return encounteredIssues;
  }


  public void setEncounteredIssues(Object encounteredIssues) {
    this.encounteredIssues = encounteredIssues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Analytic analytic = (Analytic) o;
    return Objects.equals(this.id, analytic.id) &&
        Objects.equals(this.delivery, analytic.delivery) &&
        Objects.equals(this.preparationTime, analytic.preparationTime) &&
        Objects.equals(this.deliveryTime, analytic.deliveryTime) &&
        Objects.equals(this.driverEfficiency, analytic.driverEfficiency) &&
        Objects.equals(this.encounteredIssues, analytic.encounteredIssues);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, delivery, preparationTime, deliveryTime, driverEfficiency, encounteredIssues);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Analytic {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    delivery: ").append(toIndentedString(delivery)).append("\n");
    sb.append("    preparationTime: ").append(toIndentedString(preparationTime)).append("\n");
    sb.append("    deliveryTime: ").append(toIndentedString(deliveryTime)).append("\n");
    sb.append("    driverEfficiency: ").append(toIndentedString(driverEfficiency)).append("\n");
    sb.append("    encounteredIssues: ").append(toIndentedString(encounteredIssues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("delivery");
    openapiFields.add("preparationTime");
    openapiFields.add("deliveryTime");
    openapiFields.add("driverEfficiency");
    openapiFields.add("encounteredIssues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Analytic
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Analytic.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Analytic is not found in the empty JSON string", Analytic.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Analytic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Analytic` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `delivery`
      if (jsonObj.get("delivery") != null && !jsonObj.get("delivery").isJsonNull()) {
        Delivery.validateJsonObject(jsonObj.getAsJsonObject("delivery"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Analytic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Analytic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Analytic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Analytic.class));

       return (TypeAdapter<T>) new TypeAdapter<Analytic>() {
           @Override
           public void write(JsonWriter out, Analytic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Analytic read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Analytic given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Analytic
  * @throws IOException if the JSON string is invalid with respect to Analytic
  */
  public static Analytic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Analytic.class);
  }

 /**
  * Convert an instance of Analytic to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

