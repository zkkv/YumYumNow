/*
 * YumYumNow Delivery API
 * YumYumNow Delivery
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Courier;
import org.openapitools.client.model.Delivery;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Order;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeliveryApi
 */
@Disabled
public class DeliveryApiTest {

    private final DeliveryApi api = new DeliveryApi();

    /**
     * Get available deliveries in radius (for couriers)
     *
     * Get available deliveries in radius (for couriers). If a vendor has chosen to only deliver using its own couriers, then deliveries from that vendor will only be returned if the courier is affiliated with that vendor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deliveryGetAvailableInRadiusGetTest() throws ApiException {
        Object radius = null;
        Object courierId = null;
        List<Delivery> response = api.deliveryGetAvailableInRadiusGet(radius, courierId);
        // TODO: test validations
    }

    /**
     * A courier accept the delivery
     *
     * The delivery is assigned to a courier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deliveryIdAssignPostTest() throws ApiException {
        Object id = null;
        Courier courier = null;
        Delivery response = api.deliveryIdAssignPost(id, courier);
        // TODO: test validations
    }

    /**
     * Get a delivery
     *
     * Get delivery details based on id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deliveryIdGetTest() throws ApiException {
        Object id = null;
        Delivery response = api.deliveryIdGet(id);
        // TODO: test validations
    }

    /**
     * Specify the order rating
     *
     * Customers can rate the order on scale from 1 to 5.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deliveryIdOrderRatingPostTest() throws ApiException {
        Object id = null;
        Object body = null;
        Delivery response = api.deliveryIdOrderRatingPost(id, body);
        // TODO: test validations
    }

    /**
     * Update the delivery time
     *
     * Update estimatedDeliveryTime of an existing delivery (for couriers)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deliveryIdUpdateDeliveryTimePostTest() throws ApiException {
        Object id = null;
        Object body = null;
        Delivery response = api.deliveryIdUpdateDeliveryTimePost(id, body);
        // TODO: test validations
    }

    /**
     * Update the location of the delivery
     *
     * Update the current location of the delivery (for couriers)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deliveryIdUpdateLocationPostTest() throws ApiException {
        Object id = null;
        Location location = null;
        Delivery response = api.deliveryIdUpdateLocationPost(id, location);
        // TODO: test validations
    }

    /**
     * Update the status of a delivery
     *
     * Update the status of a delivery. Vendors can set the status to ACCEPTED, REJECTED, PREPARING, GIVEN_TO_COURIER. Couriers can set the status to IN_TRANSIT, DELIVERED.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deliveryIdUpdateStatusPostTest() throws ApiException {
        Object id = null;
        Object body = null;
        Delivery response = api.deliveryIdUpdateStatusPost(id, body);
        // TODO: test validations
    }

    /**
     * Create a delivery
     *
     * Create a delivery based on order data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deliveryPostTest() throws ApiException {
        Order order = null;
        Delivery response = api.deliveryPost(order);
        // TODO: test validations
    }

}
